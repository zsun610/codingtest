Linux command

● 현재 디렉토리 살펴보기
  1) pwd(print working direction) : 현재 위치의 경로
  2) ls(list) : 현재 디렉터리에 어떤 파일이나 디렉터리가 있는지 확인
  3) - : 리눅스 명령에 옵션을 추가
  4) -l : 파일과 디렉터리의 상세정보까지 표시하는 옵션을 추가
  5) -a : 숨긴 파일과 디렉터리를 표시 (ex: ls -la)
  6) -r : 파일의 정렬 순서를 거꾸로 표시
  7) -t : 파일 작성 시간 순으로(내림차순) 표시

-------------------------------------------------------------------------------------------------------------------------------

● 터미널 창에서 디렉토리 이동하기 
  1) cd(change directory) : 디렉터리 사이를 이동 
    -> $ cd .. : 상위 디렉터리로 이동
    -> $ cd Users : 하위 디렉터리로 이동
    -> $ cd ~ : 홈 디렉터리로 이동
  2) ~ : 현재 접속 중인 사용자의 홈 디렉터리를 가리킨다. 홈 디렉터리 경로 : 'c/Users/사용자아이디'
  3) ./ : 현재 작업 중인 디렉터리
  4) ../ : 현재 디렉터리의 상위 디렉터리
  5) clear : 터미널 창 내용을 지움
  6) exit : 터미널 창을 종료
  ex) cd ~/Documents : Documents 디렉터리로 이동

-------------------------------------------------------------------------------------------------------------------------------

● 터미널 창에서 디렉토리 만들기 및 삭제
  1) mkdir 디렉터리명(make directory) : 현재 디렉터리 안에 하위 디렉터리를 만듦
  2) rm -r 디렉터리명(remove directory) : 디렉터리를 삭제 (-r : 디렉터리 안에 있는 하위 디렉터리와 파일까지 함께 삭제)
    -> 상위 디렉터리에서 디렉터리를 삭제해야!
  
-------------------------------------------------------------------------------------------------------------------------------

● 빔에서 텍스트 문서 만들기
  1) Vim : 리눅스의 기본 편집기는 터미널에서 사용할 수 있는 대표적인 편집기
  2) vim 파일명 : 파일이 있다면 파일을 열고, 파일이 없다면 새로운 파일을 만듦. (ex: vim test.txt)
  3) 입력 모드 : 문서를 작성 (텍스트 입력, 수정) => [Esc 키] ex 모드
  4) ex 모드 : 문서를 저장, 종료 (처음에 ex모드로 열림) => [I(insert) || A(add) 키] 입력 모드
  5) 텍스트 입력이 끝난 후 파일을 저장할 때는 Esc키를 통해 다시 ex모드로 돌아간다.
  6) :(콜론)을 입력하면 원래 끼워넣기가 있던 자리에 텍스트를 입력할 수 있다.
  7) :wq(w:저장, q:종료) : 저장하고 종료
  
-------------------------------------------------------------------------------------------------------------------------------

● 빔 ex모드 명령 모음
  1) :w || :write : 편집 중이던 문서를 저장
  2) :q || :quit : 편집기를 종료
  3) :wq (파일) : 편집 중이던 문서를 저장하고 종료, 파일 이름을 함께 입력하면 그 이름으로 저장
  4) :q! : 문서를 저장하지 않고 편집기를 종료 (확장자가 .swp인 임사 파일이 생김)

* 깃에서 기본 편집기 변경하기 (notepad++로 변경)
: $ git config --global core.editor "notepad++"
  
-------------------------------------------------------------------------------------------------------------------------------

● 텍스트 문서 내용 확인하기
  1) cat 텍스트 파일명 : 텍스트 파일의 내용을 보여줌
  2) cat 파일1, 파일2, ... 파일n > 새파일 : 파일 n개를 차례로 연결해서 새로운 파일을 만듦
  3) cat 파일1>>파일2 : 파일1의 내용을 파일2 끝에 연결
  
-------------------------------------------------------------------------------------------------------------------------------

● 깃 저장소 만들기
  $ git init : 이 디렉토리에 저장소를 만듦 (깃을 사용할 수 있도록 디렉터리를 초기화)
    -> .git 디렉터리는 감춰져 있음 (숨긴 항목 체크)
  $ git init 깃저장소명 : 새로운 디렉터리를 만들고 저장소를 초기화함
  
-------------------------------------------------------------------------------------------------------------------------------

● 깃 버전 만들기
  1) 작업 트리 : 파일 수정, 저장 등의 작업을 하는 디렉터리 (=작업 디렉터리) (hello-git 눈에 보이는 디렉터리)
  2) 스테이지 : 버전으로 만들 파일이 대기하는 곳 (10개의 파일을 수정했는데 4개의 파일만 버전으로 만들려면 4개의 파일만 스테이지로 넘겨줌)
  3) 저장소(리포지토리) : 스테이지에서 대기하고 있던 파일들을 버전으로 만들어 저장하는 곳
    * 스테이지 내용은 .git/index 파일에 저장되고, 저장소 내용은 .git/HEAD 파일에 저장
    * 스테이지와 저장소는 눈에 보이지 않음 (깃을 초기화했을 때 만들어지는 .git 디렉터리 안에 숨은 파일 형태로 존재)
  => 먼저 작업 트리에서 문서를 수정합니다. 수정한 파일 중 버전으로 만들고 싶은 것을 스테이지에 저장한다. 스테이지에 있던 파일을 저장소로 커밋
    
-------------------------------------------------------------------------------------------------------------------------------

● 작업 트리에서 빔으로 문서 수정하기
  $ git status : 깃 상태를 확인
    - On branch master : 현재 master branch에 있음.
    - No commits yet
    - nothing to commit
    - untracked files : 깃에서 한 번도 버전 관리하지 않은 파일

-------------------------------------------------------------------------------------------------------------------------------

● 수정한 파일을 스테이징하기
  $ git add : 수정한 파일을 스테이징
  * $ git add. : 수정한 파일들을 한꺼번에 스테이징

-------------------------------------------------------------------------------------------------------------------------------

● 스테이지에 올라온 파일 커밋하기
: 파일이 스테이지에 있다면 이제 버전을 만들 수 있음, 깃에서는 버전을 만드는 것을 커밋한다 말함.
  $ git commit -m "message1" : 깃에서 파일을 커밋함. 한 칸 띄운 후에 -m을 붙이면 커밋 메시지를 함께 적을 수 있음
      
-------------------------------------------------------------------------------------------------------------------------------

● 스테이징과 커밋 한꺼번에 처리하기
  $ git commit -am "message2" : 한 번 커밋한 파일이라면 스테이징과 커밋을 한꺼번에 처리 가능
  $ git commit -m "message2" : 처음 커밋하는 파일
      
-------------------------------------------------------------------------------------------------------------------------------

● 커밋 내용 확인하기
  $ git log : 지금까지 만든 버전과 설명이 화면에 나타남 (커밋 로그)
  $ git log oneline : 한 줄로 간략하게 표시
  commit 옆 긴 문자열 : 커밋 해시 || 깃 해시 (커밋을 구별하는 아이디)
  (HEAD -> master) : 이 버전이 가장 최신
      
-------------------------------------------------------------------------------------------------------------------------------

● 변경 사항 확인하기 : $ git diff 
  => 작업 트리에 있는 파일과 스테이지에 있는 파일을 비교하거나, 스테이지에 있는 파일과 저장소에 있는 최신 커밋을 비교
        
-------------------------------------------------------------------------------------------------------------------------------

● 버전을 만드는 단계마다 파일 상태 알아보기
  1) tracked 파일, untracked 파일
    1-1) tracked 파일 : 깃은 한 번이라도 커밋한 파일의 수정 여부를 계속 추적하는데 이러한 파일을 일컫음
    1-2) untracked 파일 : 한 번도 깃에서 버전 관리를 하지 않아 수정 내역을 추적하지 않음
    - 'Changes not staged for commit' : 변경된 파일이 아직 스테이지에 올라가지 않았다
  * $ git log --stat : 각 커밋에 관련된 파일까지 함께 보여줌 (로그 메세지가 너무 많을 경우 [enter]를 누르면 다음 로그 화면 [q]를 누르면 빠져나옴.)

  2) 버전 관리하지 않은 파일/디렉토리
    .gitignore 파일 생성하여 다 저장 (메모 파일, swp파일, 백업 파일 등)

  3) unmodified, modified, staged 상태
        
-------------------------------------------------------------------------------------------------------------------------------

● 방금 커밋한 메시지 수정 :  $ git commit --amend 
 
-------------------------------------------------------------------------------------------------------------------------------

● 작업 되돌리기
  1) 작업 트리에서 수정한 파일 되돌리기 : $ git checkout -- 파일명   (checkout 대신 restore 써도 되는건가?)
  2) 스테이징 되돌리기(취소) : $ git reset HEAD 파일명 (파일명 적지 않으면 스테이지에 있는 모든 파일을 되돌림)
  3) 최신 커밋 되돌리기 : $ git reset HEAD^ (스테이징도 취소)
  4) git reset 명령 옵션
    4-1) --soft HEAD^ : 최근 커밋을 하기 전 상태로 작업 트리를 되돌림
    4-2) --mixed HEAD^ : 최근 커밋과 스테이징을 하기 전 상태로 작업 트리를 되돌림 (git reset 의 기본값)
    4-3) --hard HEAD^ : 최근 커밋과 스테이징, 파일 수정을 하기 전 상태로 작업 트리를 되돌림 (복구 불가)
  5) 특정 커밋으로 되돌리기 : $ git reset --hard 커밋 해시 (특정 커밋 이후의 버전들은 모두 삭제됨)
  6) 커밋 삭제하지 않고 되돌리기 : $ git revert 
 
-------------------------------------------------------------------------------------------------------------------------------

● 브랜치(branch) : 커밋을 가리키는 포인터
  - 깃으로 버전 관리를 시작하면 기본적으로 master 라는 branch가 만들어진다. 
    사용자가 커밋할 때마다 master branch는 최신 커밋을 가리킨다. 
  - 분기(branch)한다 : master 브랜치에서 뻗어 나오는 새 브랜치를 만듦
  - 병합(merge)한다 : 새 브랜치에서 작업을 끝낸 후 master 브랜치에 합침
  - HEAD : 현재 작업 중인 브랜치를 가리키는 포인터
  - $ git branch : 깃에서 브랜치를 만들거나 확인
  - $ git branch 브랜치명 : 새 브랜치 생성

  - 브랜치 사이 이동하기 : git checkout 브랜치명 
   
-------------------------------------------------------------------------------------------------------------------------------

● 브랜치 정보 확인하기
  1) 새 브랜치에서 커밋하기
    - $ git log --oneline --branches : 각 브랜치의 커밋을 확인할 수 있음
    - $ git log --oneline --branches --graph : 브랜치와 커밋의 관계를 그래프로 확인 
  2) 브랜치 사이의 차이점 알아보기 
    $ git log 브랜치명1..브랜치명2 : 왼쪽 브랜치를 기준으로 오른쪽 브랜치와 비교하여 차이점을 알려줌
    (브랜치1에는 없고 브랜치2에 있는 것을 알려줌)
  3) 브랜치 병합하기
    - 서로 다른 파일 병합하기 : $ git merge 가져올 브랜치명
    - 같은 문서의 다른 브랜치를 뻗어 파일을 수정했을 때 병합하기
    - 같은 문서의 같은 위치를 수정했을 때 병합하기
      : 깃에서는 줄 단위로 변경 여부를 확인한다. 그래서 각 브랜치에 같은 파일 이름을 가지고 있으면서 같은 줄을 수정했을 때
      브랜치를 병합하면 브랜치 충돌이 발생한다. 만일 여러 개 파일 중 몇 개만 충돌이 발생했다면 충돌이 발생하지 않은 파일들은 자동으로 병합
  4) 병합이 끝난 브랜치 삭제하기 
    : 브랜치를 병합한 후 더 이상 사용하지 않는 브랜치는 깃에서 삭제할 수 있다. 
      단, 이렇게 삭제하더라도 다시 같은 이름의 브랜치를 만들면 예전 내용을 다시 볼 수 있다. (git 흐름에서 감춘것 뿐)
      * 브랜치를 삭제하려면 master 브랜치에서 해야한다.
    $ git branch -d 브랜치명 
    $ git branch -D : 병합하지 않은 브랜치를 삭제
   
-------------------------------------------------------------------------------------------------------------------------------

● 브랜치 관리하기
  1) 브랜치에서 checkout과 reset의 작동 원리
    - HEAD : 현재 작업 트리(working directory)가 어떤 버전을 기반으로 작업 중인지를 가리키는 포인터
      (기본값으로 master 브랜치를 가리킴)
    - branch : 브랜치에 담긴 커밋 중에서 가장 최근 커밋을 가리킴
    ex) 저장소에 c1 커밋을 만들면 HEAD는 master 브랜치를 가리키고 master 브랜치는 c1 커밋을 가리킴

  2) 수정 중인 파일 감추기 및 되돌리기 - $ git stash
     
-------------------------------------------------------------------------------------------------------------------------------

● 깃허브
  1) 지역 저장소(local repository) : 작업하는 컴퓨터
  2) 원격 저장소(remote repository) : 컴퓨터나 서버에 만든 저장소
  
-------------------------------------------------------------------------------------------------------------------------------

● 깃허브에 SSH 원격 접속하기
  1) SSH(Secure Shell) 원격 접속 : 보안이 강화된 안전한 방법으로 정보를 교환하는 방식
    - SSH 키생성기를 실행 : Public Key(외부에 공개되는 키) 와 Private Key(사용자 컴퓨터에 저장되는 키) 를 한 쌍으로 묶어서 컴퓨터를 인증 